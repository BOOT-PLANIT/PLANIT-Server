<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.planit.planit.domain.attendance.mapper.AttendanceMapper">

<!-- 일일 출결 조회 -->
<select id="getDaily" resultType="com.planit.planit.domain.attendance.dto.AttendanceDailyResponseDTO">
    SELECT 
        a.id            AS attendanceId,
        a.status        AS status,
        b.id            AS bootcampId,
        b.name          AS bootcampName,
        s.id            AS sessionId,
        s.class_date    AS classDate,
        p.unit_no       AS unitNo,
        p.start_date    AS startDate,
        p.end_date      AS endDate
    FROM attendance a
    JOIN sessions s       ON a.session_id = s.id
    JOIN bootcamps b      ON s.bootcamp_id = b.id
    JOIN unit_periods p   ON s.period_id = p.id
    WHERE a.user_id = #{userId}
      AND s.bootcamp_id = #{bootcampId}
      AND s.class_date = #{date}
</select>

<!--	특정 날짜에 수강정보 조회 -->
	<select id="getDailySession" resultType="map">
	    SELECT 
	        id,
	        period_id
	    FROM sessions
	    WHERE bootcamp_id = #{bootcampId}
	      AND class_date = #{date}
	</select>
	
<!--일일 출결 등록 
  <insert id="regist" parameterType="com.planit.planit.domain.attendance.dto.AttendanceDTO" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO attendance (user_id, session_id, period_id, status)
    VALUES ( #{userId}, #{sessionId}, #{periodId}, #{status})
  </insert>-->
	
	  <!-- 세션 정보 조회 (bootcamp_id + 날짜 리스트) -->
  <select id="getSession" resultType="com.planit.planit.domain.attendance.dto.SessionSimpleDTO">
    SELECT id AS sessionId,
           period_id AS periodId
    FROM sessions
    WHERE bootcamp_id = #{bootcampId}
      AND class_date IN
      <foreach collection="classDates" item="date" open="(" separator="," close=")">
        #{date}
      </foreach>
  </select>
  
    <!-- 출결 다중 등록 -->
	  <insert id="regist"
	          parameterType="java.util.List"
	          useGeneratedKeys="true"
	          keyProperty="id">
	    INSERT INTO attendance (user_id, session_id, period_id, status)
	    VALUES
	    <foreach collection="list" item="item" separator=",">
	      (#{item.userId}, #{item.sessionId}, #{item.periodId}, #{item.status})
	    </foreach>
	    ON DUPLICATE KEY UPDATE status = VALUES(status)
	  </insert>
	  
	   <select id="findAttendanceDates" resultType="string">
		  SELECT s.class_date
		  FROM attendance a
		  JOIN sessions s ON a.session_id = s.id
		  WHERE a.user_id = #{userId}
		    AND s.bootcamp_id = #{bootcampId}
		    AND s.class_date IN
		    <foreach collection="classDates" item="date" open="(" separator="," close=")">
		      #{date}
		    </foreach>
		</select>
	


  <!-- 일일 출결 수정 -->
  <update id="update" parameterType="com.planit.planit.domain.attendance.dto.AttendanceDTO">
    UPDATE attendance
    SET
      status = #{status},
      updated_at = NOW()
    WHERE
      id = #{id}
      AND user_id = #{userId}
  </update>
  
  <!--단위 기간 출결 조회-->
  <select id="getPeriod"
        parameterType="map"
        resultType="com.planit.planit.domain.attendance.dto.AttendanceTotalResponseDTO">	    
	    SELECT 
		    a.user_id AS userId,
		    up.unit_no AS unitNo,
		    COUNT(CASE WHEN a.status = 'present' THEN 1 END) AS presentCount,
		    COUNT(CASE WHEN a.status = 'absent' THEN 1 END) AS absentCount,
		    COUNT(CASE WHEN a.status = 'late' THEN 1 END) AS lateCount,
		    COUNT(CASE WHEN a.status = 'left_early' THEN 1 END) AS leftEarlyCount,
		    COUNT(CASE WHEN a.status = 'annual' THEN 1 END) AS annualCount,
		    COUNT(CASE WHEN a.status = 'leave' THEN 1 END) AS leaveCount,
		    (
		        SELECT COUNT(*) 
		        FROM sessions s2
		        JOIN unit_periods up2 ON s2.period_id = up2.id
		        WHERE s2.bootcamp_id = s.bootcamp_id
		          AND up2.unit_no = up.unit_no
		    ) AS totalSessions
		FROM attendance a
		JOIN sessions s ON a.session_id = s.id
		JOIN unit_periods up ON s.period_id = up.id
		WHERE a.user_id = #{userId}
		  AND s.bootcamp_id = #{bootcampId}
		  AND up.unit_no = #{unitNo}
		GROUP BY a.user_id, unit_no;
	</select>
	
	<!--부트캠프에 존재하는 단위기간 조회-->
	<select id="getBootcampUnitno" resultType="int">
		select unit_no from unit_periods where bootcamp_id = #{bootcampId};
	</select>
  
  <!--오늘까지 전체 출결 조회 (&lt; : <이라는뜻)-->
  <select id="getTotal"
        parameterType="map"
        resultType="com.planit.planit.domain.attendance.dto.AttendanceTotalResponseDTO">	    
		SELECT 
		    a.user_id AS userId,
		    COUNT(CASE WHEN a.status = 'present' THEN 1 END) AS presentCount,
		    COUNT(CASE WHEN a.status = 'absent' THEN 1 END) AS absentCount,
		    COUNT(CASE WHEN a.status = 'late' THEN 1 END) AS lateCount,
		    COUNT(CASE WHEN a.status = 'left_early' THEN 1 END) AS leftEarlyCount,
		    COUNT(CASE WHEN a.status = 'annual' THEN 1 END) AS annualCount,
		    COUNT(CASE WHEN a.status = 'leave' THEN 1 END) AS leaveCount,
		    (
		        SELECT COUNT(*) 
		        FROM sessions s2
		        WHERE s2.bootcamp_id = s.bootcamp_id
		    ) AS totalSessions
		FROM attendance a
		JOIN sessions s ON a.session_id = s.id
		JOIN unit_periods up ON s.period_id = up.id
		WHERE a.user_id = #{userId} 
		  AND s.bootcamp_id = #{bootcampId}
		  AND s.class_date &lt;= CURDATE()
		GROUP BY a.user_id;
	</select>
	
</mapper>


